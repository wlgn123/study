<<<<<<< HEAD
클라우드 란?
플랫폼이랑 어떠한 기반 위에 새로운 서비스나 이미 만들어놓은 서비스를 올려서
여러 용도로 사용하는 것을 의미한다
페이스북,앱스토어,카카오톡 등 이미 많은 곳에서 플랫폼을 제공하고 있다.
그저 사용자는 플랫폼에 원하는것을 올리기만 하면 서비스를 할 수 있는 것 이다.
그 플랫폼을 사용하는 유저들은 다른 유저들의 서비스를 사거나 체험 해볼 수도있다.
클라우드는 클라우드 기반 플랫폼으로써
플랫폼의 하나라 볼수있다.
플랫폼이란어떠한 기반 위에 새로운 서비스나 이미 만들어놓은 서비스를 올려서
여러 용도로 사용하는 것을 의미한다
Run level 0 shut down  만약 할경우 다시 킬려면 컴퓨터에 물리적으로 접근해야함
          1 single mode(외부와의 접근을 끊음) 컨트롤 하려면 물리적으로 접근해야함
          2
          3 text mode
          4
          5 GUI mode
          6 Reboot
Root user  - 최소한의 유저
일반 유저
기타 유저
/etc/passwd  - 사용자 정보
/etc/shadow  - 사용자 비밀번호 - 경합이 가장 많이 일어남 메모리를 사용해서 처리
/etc/group - 사용자 그룹 정보
adduser or
useradd -d /userhomeDirectory username
passwd username
암호 입력창 뜸.
userdel -r name
         ^- 유저에게 지정된 폴더도 다 삭제
sudo ( 슈퍼 유저 )(정해진 권한 사용 가능)
해당 사용자 제거후
그사용자의 파일이 남아 있을경우
chown 으로 소유권을 바꾸거나 해야함.
chgroup 파일의 그룹을 바꿈.
chmod 권한 설정
사용자가 작업할 영역을 정확히 명시 해줘야한다.
프로세스를 만들때
시스템 엔진을 만드는것이 아니라면
왠만하면 유저용 프로세스로 띄우는 것이 좋다.
메일보내기
yum install mail ( 설치
yum remove mail (삭제
mail id  엔터
subject : 제목 엔터
본문
.(dot)만 작성하고 엔터를 치게되면 본문작성이 종료되고
메일이 보내진다.
mail -s 메일제목 받는이
본문
.(dot)
swap 확인 방법
free - m (메가 단위로 확인)
free - k (킬로 단위로 확인)
top
가상메모리 설정
if of
1 ) swap 역할을 할 file 생성
dd if:/dev/zero of=/원하는디렉토리/swapfile bs=1024(1킬로바이트란뜻) count=2000000
2 ) mkswap (swap파일로 지정해줌)
mkswap /디렉토리/swapfile
3 ) chmod (일반 유저들이 건드리지 못하도록 권한변경)
4 ) swapon 파일디렉토리
swapon /디렉토리/swapfile
^- 껐다 킬 경우 swap이 해제 되므로 Autoexec.bat(자동실행배치파일)에
명령어를 추가 시켜 놓는게 편한다.
런레벨
Sn  시작순서 S1 제일처음 Sn 제일 마지막
Kn  죽는 순서 K1 제일처음 끝남 Kn 제일 마지막
~ (홈디렉토리)
~/aws 홈디렉토리에 있는 aws에 간다
홈디렉토리 확인법
1)
cd 엔터
pwd
후에 보이는 주소가 홈디렉토리
2)
env 엔터
환경변수중에
HOME =  이부분이 홈디렉토리
환경변수 출력
echo $HOME
홈 출력
홈 이동방법
cd $HOME
cd ~/aws
cd ~./aws
현재 쉘 bash
쉘을 변경하고싶으면
tcsh
csh
sh
bash
#! /bin/csh
지금 스크립트는 csh 라고 명시해줌
export 바로 적용하겠다
export PS1 (프롬프트 변경)
\\ 역슬래시
\d 날자를 "요일 월 일" 형식으로 표시
\H 현재 쉘이 실행되고 있는 도메인네임 출력
\h 호스트 네임 출력
\t 현재 시간 HH:MM:SS 형식으로 표시
\n 개행문자
\s 쉘의 이름
\W 현재 작업 경로의 마지막 디렉토리명
\w 현재 작업 경로의 절대 경로출력
\u 현재 사용자의 사용자명
\$ 유효 UID가 0이면 # 아니면 $ (ROOT면 # 아니면 $)
\@ 12시간제로 오전/오후형식으로 현재 시간 출력
\[
\]
.bashrc 그외에 실행할것들
.bash_profile PATH 관련
/etc/inittab 이란 곳에서
기본 런레벨 설정을 볼수있다.
id:3:initdefault:
기본은 text모드 이다.
/etc/init.d/
안에 프로세스가 존재해야
/etc/rcn.d/ 에 등록하여 사용할수있다.
rc0~6까지
ex
/etc/init.d/ 에 KBH 이라는 프로세스가존재 할 경우
/etc/rc3.d/S13KBH   런레벨3 (text mode)로 킬 경우 KBH가 13번째로 시작됨.
가상 메모리를 만들때에는
되도록이면 홈디렉토리에 만들지 말것
가능하면 루트만 접근가능한 디렉토리
(타유저가 접근하지 못하도록)
swap 일반 메모리 확장
속도가 느리기 때문에 꾸준히 swap을 사용하는 경우에는 메모리 확장이 필요하다.
top
나free로 확인가능
단위틀리거나 안쓰면 틀림.
로그인할 때 적용되는 스크립트
.bashrc
.bash_profile
( 로그인할 때 개인적으로 적용되는 스크립트
모든 유저에게 적용되는 스크립트는
/etc/bashrc 가 있다.
vi 명령어
:set nu 행번호
:set nonu 행번호 지움
:set ts=4  탭의 길이를 4로 정함.
alias 원하는 명령을 실행할 명령어를 만듦
alias ls='ls-la' 로 할 경우
ls 명령을 실행시 ls-la가 실행된다.
껐다 킬 경우 alias 설정이 사라진다
~/.bashrc 에 기술해놓으면 껏다켜도 무관하다.
패스워드
인증 순서
사용자가 패스워드를 입력
입력된 패스워드를 암호화
암호화된 패스워드와 미리 저장되어 있던 암호화된 패스워드를 비교
두 암호가 일치하면 인증 성공
초기 패스워드 파일에
암호화된 패스워드 / 사용자 디렉토리 / uid /쉘
등등 패스워드와 유저 정보가 함께있었음 ( 단일 패스워드 파일)
단일 패스워드 파일의 단점
하드웨어 성능 발전으로 인한 dictionary attack 일상화
가정용 컴퓨터의 계산 속도 급증 으로 아무나 공격이 가능해짐
해결책 : shadow 패스워드
해결책1 셰도우 패스워드 기법
암호화된 패스워드 엔트리를 패스워드 파일에서 제거
shadow라는 별도의 파일에 암호화된 패스워드를 저장
기존 패스워드 파일 : 모든 사용자가 읽을 수 있도록
셰도우 패스워드 파일 : ㄱoot 사용자만이 읽을 수 있도록
해결책2: 패스워드 암호화 알고리즘 계선
MD5기법 (안씀)
/etc/passwd
기존 계정 디스에이블 하기
 패스워드 엔트리 뒤에 별표(*)를 삽입 하는것.
 별표뒤에 사유를 붙여줘도 상관없음.
UID 0이면 ROOT
/etc/group 파일의 등록정보
그룹이름 : 8글자 이하
그룹의 암호화된 패스워드
GID
awscon.sh
이파일을 어느 곳에서나 실행할수 있게 하려면
PATH 환경변수를 추가 설정해야한다.
vi ./.bash_profile
PATH = $PATH:$HOME/aws
다른곳에있는 명령어도 절대경로없이 사용하고싶을경우 추가로 패스 환경변수에 넣어주면된다.
PATH = $PATH:$HOME/macto
이렇게하면 절대경로없이 aws에있는 macto에있는 명령어들을 사용할수있다.
백그라운드 작업 실행 방법
netscape &
bash의 작업 제어 명령어
ctrl-z
jobs 명령어
bg number
number : 백그라운드로 실행을 재개 시키고자 하는 작업 번호
fg number
포그라운드로 실행을 재개 시키고자 하는 작업 번호
환경변수
실행중인 모든 쉘 인스턴스들은 각자의 환경변수를 가진다
printenv 로 환경변수를 출력할 수 있다.
환경 변수 설정
Variable = value
외부에 알리기
export Variable
파이프(프로그램의 출력을 다른 프로그램 출력으로 보내는 매커니즘)
printenv | grep "OSTYPE"
리다이렉션(프로그램의 출력을 파일로 보내는 기능)
overwrite(>) append(>>)  input(<)
ls > /tmp/directory_listing
echo "Directory Listing" >> /tmp/directory_listing
grep "root" < /etc/passwd
다중 명령어
;을 이용하여 여러 개의 명령어를 한꺼번에 입력할 수 있다.
ls 파일목록보기
-l 목록을 자세하게 보여준다
-a 모든파일을 보여준다
-1(숫자1) 현재 디레겉리 내의 파일과 디렉터리 이름만 보여준다
-R 모든파일은 물론 모든 서브디렉터리 내의 목록도 재귀적으로 순환하여 보여준다
ls a* a로 시작하는 모든 파일이나 디렉터리의 목록
링크
하드링크
	평상시에 디스크에 존재하다가 파일이 오픈 되면 커널로 올라온다.
	서로 다른 두개의 파일 이름을 사용하여 하나의 파일을 참조할 필요가 있을 때 사용
	원래의 파일과 동일한 i노드를 가지므로 디렉터리 엔트리는 달라도 원래의 파일과 동일한 내용을 갖는다.
	하드링크가 만들어지는 만큼 i노드에는 참조계수가 증가
	단점 : 다른 파일 시스템 상에 존재하는 파일은 하드링크 할수 없다.
심볼링 링크
	파일이름으로 다른 파일을 가리킨다.
	다른 파티션 뿐만 아니라 다른 네트워크 장치 상에 있는 파일도 가리킬 수 있다.
소유권 변경하기
chown
chown username filename
-R 디렉터리
그룹 변경하기
chgrp
chgrp groupname filename
-R 디렉토리
cp 파일 복사
-f 강제적인 복사 묻지않는다.
-i 대화형 복사 복사하기전에 묻는다.
cp index.html index-orig.html
mv 파일 이동
-f 강제적인이동
-i 대화형 이동
mv /usr/src/myprog/bin/* /usr/bin
ln 링크를만든다
그냥쓰면 하드링크를만들게됨
-s를 붙이면 심볼릭링크
ln -s /usr/local/bin/myadduser /usr/bin/myadduser
find 파일찾기
7일이상 접근되지 않았던 /tmp 내의 모든 파일 찾기
find /tmp -atime 7 -print
디렉터리에서 이름이 core인 모든 파일을 찾아 삭제하라
find /usr/src -name core -exec rm
.jpg로 끝나고 크기가 100k를 넘는 파일을 /home 디렉터리에서 찾아라
find /home -name "*.jpg" -size 100k
파일묶기 tar
복수개의 파일들을 하나의 큰 파일로 결합해주는 기능
tar [commands] filename
-c 새로운 묶음 파일을 만든다.
-t 묶음파일에 들어있는 파일들의 목록을 본다.
-x 묶음파일에서 파일들을 추출한다.
-f 묶음파일을 저장한 파일 이름을 지정한다.
-v 수행 중 자세한 내용을 보여준다.
-z 파일이 이미 gzip으로 압축되있거나, 압축하려할때 사용
/usr/src/apach 디렉터리 밑에 있는 모든 파일을 한데 묶어 apache.tar을 만들려면
tar -cf apach.tar /usr/src/apache
du 디스크 사용량 보기
-c 실행 마지막에 총 디스크 사용량합계를 보여준다.
-h 사람이 이해하기 쉬운 포맷으로 디스크 사용량을 출력한다.
-k 크기를 블록개수가 아닌 킬로바이트로 출력한다.
-s 개별 디렉터리 별로 크기를 출력하지말고 모두 합쳐 요약 내용을 보여준다.
which 파일의 디렉터리 위치보기
ls 명령어가 어디있는지보기
which ls
명령어 위치찾기
whereis grep
df 디스크 가용량보기
사용 가능한 디스크 빈 공간의 크기를 파티션 별로 출력
-h 가용한 디스크 공간의 양을 사람이 읽을 수 있는 숫자로 보여준다.
-l 로컬 디스크에 마운트 된 파일 시스템에 대한 정보만 보여준다.
로컬 디스크 마운트된 파일 시스템에 대한 가용 공간을 보기 위해서는
df -l
ps 프로세스 목록보기
-a 현재 터미널의 모든 프로세스
-r 수행 중인 프로세스만 보여준다.
-x 제어 터미널이 없는 프로세스를 보여준다
-u 프로세스 소유자를 보여준다
-f 프로세스 간에 부모/자식 관계를 보여준다.
-w 명령라인 인자를 보여준다.
-ww 명령라인 전부를 보여준다
kill
kill은 프로세스들을 종료시키기 위한 명령어가 아니다
본래기능 : 실행 중인 프로세스에 시그널을 보내는것
kill 시그널 9번 : 프로세스 강제 중지
2059번 프로세스를 종료시키러면
kill 2059
확실히 종료시키고싶으면
kill -9 593
부트로더
하드 디스크의 MBR에 위치하며 컴퓨터를 키면 수행된다.
운영체제를 기동시켜준다.
리눅스에서는 여러 부트로더를 사용 할 수 있다.
LILO
GRUB
LILO : 부트관리자
운영체제를 선택하여 부팅
부팅할 커널 설정이나 버전을 선택
	커널 업그레이드 할 때 미리 시험해 볼 경우 특히 편리하다.
LILI 설정 파일 : /etc/lilo.conf
GRUB : 3단계 부트 로더
	두번째 단계에서 파일 시스템을 마운트함.
	/boot/grub 파일을 보면 x_stage_1_5형태의 파일을 볼 수 있다.
	세번째 단께에서 적재할 운영체제를 선택함
	CLI를 봉쇄하고 설정 파일에 있지 않은 다른 커널을 부트할 수 있다.(LILO와 다른점)
init 프로세스
	커널 프로세스가 아니면서 시작되는 첫번째 사용자 프로세스
	언제나 프로세스 ID 1번을 갖는다.
	설정파일 /etc/inittab을 읽어 자신의 run-level을 결정
	runlevel 0 시스템정지
	runlevel 1 단일 사용자 모드
	runlevel 2 다중 사용자 모드
	runlevel 3 완전한 다중 사용자 모드
	runlevel 4 사용되지않음
	runlevel 5 실행-레벨3과 같음, 다만 gui기반이다
	runlevel 6 재부팅
서비서의 인에이블과 디스에이블
 방법1 실행-레벨 디렉터리에 있는 심볼릭 링크 이름을 변경
 방법2 ksysv 도구를 사용하는 방버ㅜㅂ
 방법1 : 서비스 디스에이블
	서비스 명과 시작한 실행-레벨 정보를 알아야 한다.
		find . -name "*nfs*" -print
	init.d 디렉터리에 있는 스크립트 본체는 그대로 두는 것이 좋다.
	실행-레벨 디렉터리로 간 다음 s대신 k로 시작하도록 심볼릭 링크 이름을 변경
	심볼릭 링크 이름에서 숫자는 변경하지 않는 것이 좋다.
	서비스 인에이블
		k를 s로 변경한다.
fsck
	File System ChgecK 도구는 부트할 때마다 자동적으로 실행된다.
	전에 비정상적으로 셧다운 되었다면
		fsck 는 /etc/fstab 파일에 나열된 모든 로컬 디스크를 검사.
파일시스템
파일시스템의 구성
	i-Node
	파일 시스템 상의 모든 파일마다 하나씩 존재
	파일에 대한 제어정보와 데이터 블록 포인터를 담고있는 제어 구조체
	i-node의 제어 정보
	파일의 소유자
	허가권
	크기
	마지막 접근 시간
	생성 시간
	그룹 ID등
수퍼블록
	파일 시스템 전체 구조에 대한 정보를 담고 있는 가장 중요한 메타 구조체
		파티션의 레이아웃
		이용 가능한 공간의 양
		맨 처음 i노드의 위치
	깨지면 안 되는 매우 중요한 구조체
		커널은 수퍼 블록의 복사본을 디스크의 여러 곳에 분산 저장
		첫번째 것이 손상되었을 경우 다른 것을 사용하기 위함이다.
ext3
	저널링 파일 시스템
	기존일반 파일 시스템의 단점
		시스템 장애가 발생 했을때 디스크 상의 모든 파일이 dangling references
		를 갖고 있는 지를 확인하기 위해 fsck프로그램을 수행해야 한다는 것
	저널링 파일 시스템의 원리
		데이터를 디스크에 기록할 때 적절한 장소를 찾는 대신에 가장 빨리 저장 할 수있느 ㄴ
		아무곳에나 데이터를 기록
		그 때마다 이 데이터 블록의 위치를 로깅
		데이터를 기록하는데 걸리는 시간이 훨씬 적어지고,
		데이털르 빨리 기록하는 안정성 때문에 시스템에 장애가 발생하더라도 매번
		fsck를 수행할 필요가 없다는 것을 의미
로컬 디스크의 마운트와 언마운트
mount 명령어
	mount 옵션 device directory
	-a /etc/fstab 에 나열된 모든 파일 시스템을 마운트한다.
	-t fstype 마운트 하려는 파일 시스템의 종류를 지정한다. ext2외에 fat vfat fat32등
	-o option mount 과정 중에 적용할 옵션을 지정한다.
	-o
		ro 읽기 전용으로 파티션을 마운트
		rw 읽기쓰기 가능한 모드로 마운트(default)
		exec 마운트할 파일 시스템에 있는 실행파일을 실행하는 것 을 허용하기 위한 옵션(default)
		noatime i노드 구조체에 있는 접근시간 정보를 변경하지 못하게한다.
			접근시간이 중요하지 않은 파티션의 경우 성능을 향상시킬수 있다.
		noauto	-a옵션을 지정한 경우 이 파티션을 자동으로 마운트하지 않는다.
		nosuid	응용 프로그램이 setuid프로그램 비트를 설정하지 못한다.
		sb=n	ext2 파일 시스템의 수퍼블록으로 블록n을 사용하게 한다.
ex
	/usr 디렉터리에 읽기전용 권한으로 /dev/hda3파티션을 마운트하려면
	mount -o ro  /dev/hda3/ /usr
umount 명령어
	umount [-f] directory
		directory는 언마운트 하려는 디렉터리
	ex /usr 디렉터리에 마운트 된 파티션을 언마운트 하려면
	umount /usr
파일 시스템이 사용중일땐
그 파일 시스템을 언마운트 할 수없다
	해결방법
	1 lsof/fuser 프로그램을 이용하여 어떤 프로세스가 파일을 개방하고 있는지 확인
	2 umount -f옵션을 사용하여 강제 언마운트 강행
	3 시스템을 단일 사용자 모드로 바꾼후 파일 시스템을 언마운트
/etc/fstab 파일
	/etc/fstab : mount가 사용하는 설정 파일
	시스템이 인식하는 모든 파티션에 대한 목록을 가지고 있다.
	부트 과정에서 이 목록이 읽혀지고 목록 내의 항목들은 자동으로 마운트 된다.
fsck 사용
	부트과정에서 온전하게 언마우늩 되지 않은 파티션을 발견하면 시스템은 자동적으로 fsck를 수행
	주의 : 마운트 되어있는 파일시스템에 대해 fsck를 실행시키면 안된다.
		파일시스템을 언마운트 한 후 fsck를 실행할것
파티션 개요
	분할된 디스크의 각 부분을 파티션이라고 한다.
	파티션은 그 자체로 완전한 디스크의 역할을 한다.
	디스크 분할의 목적
		여러개의 다른 운영체제를 동시에 설치하기 위해
		한 파티션에서의 디스크 공간사용이 다른 파티션에서 다른 작업을 하는데 필요한 공간을
		간섭하지 않게 하기 위해
fdisk 파티션 만드는 명령어
NFS 네트워크 파일 시스템
	NFS는 리눅스를 네트워크에서 파일 서버로 동작할 수 있게 한다.
	디스크 서비스를 중앙 집중화하면 백업과 보안이 쉬워진다.
init 프로세스
	모든 프로세스의 조상
	모든 유닉스에서 항상 먼저 시작하는 프로세스
	PID는 항상 1
init 프로세스의 역할
	최종 부모 프로세스의 역할
	특정 실행-레벨이 되었을 때 그 실행-레벨에 맞는 적절한 프로그램 실행
	실행할 프로그램은 /etc/inittab파일에 정의한다.
Inetd와 xinetd 프로세스
inetd와 xinetd
	데몬프로세스이다
	다른 네트워크 서버 관련 프로세스(ftpd,telnetd..)들을 관리하는 수퍼 서버의 역할
수퍼서버의 원리
	모든 서버 프로세스들을 미리 띄워 놓을 필요가 없다.
	inetd의 설정 파일인 /etc/inetd.conf에 서버 프로세스들을나열해 놓고,
	그 서비스들을 대신하여 inetd가 네트워크에서 들어오는연결을 기다린다.
	특정 서버 프로세스로 요청이 들어오면 inetd는 해당 프로세스만 골라서 실행한다.
	평상 시에는 오직 하나의 프로세스(inetd)만 메모리에 존재해도 된다.
inetd의 또 다른 장점
	네트워크 연결 절차를 수행하는 코드를 프로그래머가 직접 작성 하지 않아도 되게 해줌
	inetd는 수신된 네트워크 스트림 데이터를 해당 서비스 프로세스의 표준 입력으로 전달
	그 프로세스의 출력도 프로세스에게 연결한 네트워크 상의 호스트에게 보내줌
xinetd
	inetd의 새로운버전
syslogd 데몬
	서비스 데몬들이 출력하는 특별한 사건이나 메시지를 로그할 수 있는 표준 메커니즘
	로깅 수행에 필요한 표준 방법을 제공
	syslogd가 사용하는 로그파일
		var/log 디렉터리에 저장된다.
		텍스트 파일 포맷
		날짜,시간,호스트이름,프로세스이름, 프로세스pid,프로세스가 보낸 메시지등을 기록한다.
syslogd 실행하기
	부트 시에 기동 스크립트에 의해 실행되는 것이 바람직하다.
/etc/syslog.conf파일
syslogd가 실행하기 위해 필요한 설정 정보를 가지고 있는 파일이다.
복잡하지만 디폴트파일로도 충분히 사용 할 수있다.
cron
	어떤 프로그램을 지정한 날짜나 시간에 실행시킬 수 있게 해주는 기능
	시스템을 자동화하거나 정기적으로 보고서를 만들거나 다른 주기적인 일을 수행할 때 매우 유용하다.
	cron또한 부트 스크립트에 의해 시작된다.
	cron 서비스
		1분마다 깨어나서 각 사용자의 crontab파일을 조사한다.
		이 파일에는 특정 날짜와 시간에 수행하도록 계획된 프로그램들의 목록이 기록되어있다.
		현재의 날짜와 시간이 일치되는 모든 사건이 실행된다.
crontab파일
	crontab 명령어
		crond가 실행하는 엔트리를 편집할 수 있다.
		cron 설정을 수정할 수 있는 허가권을 검사하고 수정이 가능하다면 텍스트 편집기를 실행시키는 기능
		수정이 끝나면 파일을 저장하고 쉘로 돌아가게 된다.
	허가권 검사
		/etc/cron.allow & /etc/cron.deny
	crontab 파일에 cronjob을 등록하는 형식
	분 시 일 월 dayofWeek command
	dayofWeek 일요일은 0 월요일은 1  토요일을 6
	*를 가지는 항목: 모든 시간을 의미한다.
	4시간 마다 프로그램 /usr/bin/ping -c 5 zaphod 를 실행시킨다.
	0 0,4,8,12,16,20 * * * /usr/bin/ping
	금요일 오후 10시마다 프로그램실행
	0 22 * * 5 /~~~
	4월 1일 오전 4시 1분에 전자우편을 보내는 예
	1 4 1 4 * /bin/mail dad@domain.com < /hom/sshah/joke
crontab 파일편집
	crontab 파일의 편집은 직접 하지않고 crontab 명령어를 사용한다.
	crontab -e
	crontab 파일의 내용을 출력하고싶다면
	crontab -l
데몬이란?
	주기적인 서비스 요청을 처리하기 위해 백그라운드로 실행되는 프로그램
NFS 네트워크 파일 서버(시스템
NAS 네트워크 어테치트 스토레이지 네트워크 결합 스토리지 소규모 파일 공유환경에 용이
SAN 스토리지 아레아 네트워크 서로다른 종류의 데이터 저장장치를 한 데이터 서버에 연결하여
총괄적으로 관리해주는 네트워크를 말한다.
mysql -u root -p
putty에서 shell에 접속한 경우 로컬 호스트에 접속한것임
클라이언트/서버 방식
클라이언트 프로그램을 사용자에게 깔게 한후
서버와 통신만하는 방식
ssh 22
ftp 21
browser 80
mysql 3306
/etc/hosts
dns를 대신한다. 아이피와 도메인 연결해줌.
127.0.0.1 자기자신
localhost 로 도메인 연결되어있다.
db에서 알 수 있는 클라이언트 정보
id
passwd
ip
port
mysql
mysqldump
백업할때 사용한다.
mysqladmin
mysqladmin -u root -p password new-password
mysql -u root mysql
update set password = password('new-password')
where user = 'root';
mysql> flush privileges;
set password
set password for root = password('new-password');
mysql 테이블
mysql설정과 유저에 관한 정보가 있다.
유저를만들거나 테이블을만들경우에는 mysql에서 작업
use mysql(원하는데이터베이스)
create user 'inhatc'@'%' IDENTIFIED BY 'passwd';
grant all privileges on *.* to inhatc@'%' identified by 'passwd';
//모든아이피를 열어놓는다.
create user 'inhatc'@'localhost' IDENTIFIED BY 'passwd';
grant all privileges on *.* to inhatc@'%' identified by 'passwd';
//로컬 호스트만 접속가능
flush privileges;
grant all privileges on inhatc2016_db.* to 'inhatc'@'localhost';
grant all privileges on inhatc2016_db.* to 'inhatc'@'%';
flush;
inhatc
inhatc2016
ps -edf | grep ~~
프로세스 확인하기.
httpd 웹서버 서비스
named dns 서비스
bind는 설치할때 이름
syslogd 로그 데몬 서비스 이름
sendmail 메일 서비스 이름
mysqld_safe mysql 서비스 이름
httpd 80
nammed 53
rsyslogd 포트없음
sendmail 25
mysqld_safe 3306
httpd -v
아파치 버전확인
php -v
php 버전확인.
mysqld_safe & 엔터
mysqld_safe 백그라운드실행
mysql 가동
./apachectl start 엔터
아파치 가동
./configure
make
makeinstall
http://phpmyadmin.net
phpmyadmin/
/etc/httpd/conf/httpd.conf
에서 다큐먼트 루트 변경 가능하다.
다큐먼트 루트를 변경 한후
웹서비스 재가동이 필요하다.
mbstring 설치
yum install php-mbstring -y
netstat -an 명령으로 포트번호 확인가능
dns 서비스 설치
yum install bind
service named start
mysql 설치
yum install mysql
yum install mysql-server
php 설치
yum install php
yum install php-mysql
wget 링크
링크를통해 다운로드 하기.
service httpd start
service mysqld start
service mysqld_safe start
기본 다큐먼트 루트
/var/www/html/
유저애드 -d 홈디렉토리지정 유저아이디
useradd -d /home/b201344075 b201344075
passwd b201344075
서비스 포트 목록 보기
/etc/services
찾기
/etc/services | grep ft
현재 실행중인
프로세스 확인
ps -edf | grep
mysql 명령어
mysql -u root -p
비밀번호
FTP 포트 번호 21
  능동형
  수동형
  
정답
nmap localhost  port open status check
log syslogd
apache httpd
Bind named
smtp sendmail	pop3(qpopper 를 설치)를 같이 이용해야 outlook과같은것과 연동하여 메일을 쉽게 이용 가능 (port 110)
ftp vsftpd(proftpd)
scheduler crond - crontab -e 설정 -l 목록  분 시 일 월 요일 process 요일은 0부터
at 일회용 스케줄러 
ssh sshd
dns
클라이언트의 hosts파일 확인가능
있다면 바로 연결, 없다면 dns에 확인.
있다면 해당 주소로 이동
hosts 가 잘못 되어있다면 피싱사이트나, 잘못된 사이트로 이동될 수 있다.
editplus 원격 접속을 하기위한 조건
21포트의 ftp서비스를 이용하여 원격 접속가능
포트 개방
ftp,telnet 은 보안상 위험하다
sftp, ssh 사용이 좋다
둘 다 22포트 사용
https => 443포트 사용
^- SSL사용(구간암호화)
vi /etc/sysconfig/network
NETWORKING=yes
HOSTNAME=localhost.localdomain
NTPSERVERAGRS=iburst
vi /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
HWADDR=~~
TYPE=Ethernet
~~
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=dhcp
/etc/init.d/network restart
iptables -nL
웹서버
HTTP -- TCP 80
BASH
iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
HTTPS -- TCP 443
BASH
iptables -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp -m multiport --dports 80,443 -j ACCEPT
MySQL -- TCP 3306
BASH
iptables -A INPUT -p tcp --dport 3306 -j ACCEPT 
/etc/inittab 이걸 열어서 수정을해준다
default어쩌고저쩌고 해서 밑에 번호가 있다.
번호 밑에 id : 3 이라고 적혀져 있는것을 5로 수정해주면 끝!!
3) 기본모드 + 기본적인 패널
$ yum -y groupinstall "X Window System" "Desktop" "Fonts"
$ startx
OS
window
linux(ubuntu)
unix(hpux,aix,solaris)
mac osx
모바일os
Android,Ios,Bada,WinCE
명령어
mv/ls/cd/pwd/mkdir/rm/cp
top who rpm ln kill
ps cat wall aliase netstat
vi man sudo crontab free
df yum exit export su
chmod wget mount(umount) dd
useradd unzip echo sh
passwd grep find swapon
history service more mail
ping
만약 어떠한 오류로 갑자기 서버용량이 꽉찼다면 해결할 방법
0.ps를 이용 어떠한 프로세스가 도는지 확인한다.
1.rm으로 지운다.(완전 불필요한 내용일경우 가능)
2.mv(해당 데이터를 이용하고있던 프로세스들이 오류를 일으킨다.)
3.ln -s(cp 후 심볼링크를 냅두어 바꾼다.)
find 명령어
ln 명령어
하드링크는 다른 드라이브로 넘어가지못함 그냥쓰면됨
심볼링크 -s 붙인다.
/ 30% 30g
/data 90% 300g
/data2 0% 500g
/data에서
/data2를 써야될 경우
/data의 내용을 /data2로 옮긴후
cp
파티션 명을 바꾼다.
vi
fstab
에서 파티션이름을 변경할 수 있다.
file service
telnet 10.1.1.1 23
웹서버 접속가능한지 확인
putty로 telnet 10.1.1.1 80
html코드 반환
하지만 쉘을 얻고 http를 실행하는 거기 때문에
외부 방화벽 (인바운드)로 인해 차단이 되는건지 확인하기 어렵다.
클라이언트에서 cmd를 이용 telnet 10.1.1.1 80
을 이용 할 경우는 외부에서 접속하므로
외부방화벽으로 차된이 되어지는지 확인이 가능하다.
cmd 명령어를 친 후
서버의 netstat 을 이용하여 ip가 들어오는지 확인 가능
awk

snmp 심플 네트워크 매니지먼트 프로토콜
MRTG를 통해 보여준다.
80포트를 통해 브라우저로 보여준다.
대부분 SNMP를 보여줄 때 이런 방식을 많이 사용한다.
서버가 여러대일 경우 Agent를 두어 서버에 모니터링 데이터를 모아서 보여주는 형식

웹서버에
mrtg 솔루션 설치
snmp와 연결

service snmpd start

snmp port 161 udp
outbound 설정만 해주면 되지만
대게는 outbound 설정은 포트가 다 열려 있다.
대량의 데이터를 보낼때에는 udp를 많이쓴다
udp가 가볍기 때문에
snmp는 udp로만 열린다.


MRTG
yum –y install zlib-devel
yum –y install gd-devel //그래픽, 그래프를 만들어주는데 사용
yum –y install net-snmp net-snmp-utils //snmp와 사용할 유틸리티 같이 깔게된다.
yum –y install mrtg  

servcie snmpd start/restart
gd-devel에서 libpng을 같이 깔아준다.


SNMP
cp /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.orig

/etc/snmp/snmpd.conf

service snmpd start
snmpwalk –v 2c –c public 127.0.0.1

설정파일
원래 있던 양식은 #으로 주석처리후 밑에 소스를 넣는다.
com2sec local localhost public 
group MyRWGroup v1 local
group MyRWGroup v2c local 
view all included .1
access MyRWGroup “” any noauth exact all all none

snmpwalk –v 1 –c public localhost

MRTG
mrtg = /etc/mrtg/설정파일이있다.
mrtg.cfg에 설정파일이있다.
프로그램을 이용해서 만들 것
cfgmaker를 이용하여 cfg를 만들 것이다.

mrtg.cfg 자동 초기화
cfgmaker —global ‘WorkDir: /home/inhatc2016/www/mrtg’ --output
/etc/mrtg/mrtg.cfg public@localhost

mrtg.cfg 파일 수정

WorkDir: ~~~       
LoadMIBs: /usr/share/snmp/mibs/UCD-SNMP-MIB.txt,/usr/share/snmp/mibs/TCP-MIB.txt  <-- 추가

CPU 사용량
Target[localhost.cpu]:ssCpuRawUser.0&ssCpuRawIdle.0:public@127.0.0.1
RouterUptime[localhost.cpu]: public@127.0.0.1
MaxBytes[localhost.cpu]: 100
Title[localhost.cpu]: CPU Load
PageTop[localhost.cpu]: <H1>Active CPU Load %</H1>
Unscaled[localhost.cpu]: ymwd
ShortLegend[localhost.cpu]: %
YLegend[localhost.cpu]: CPU Utilization
Legend1[localhost.cpu]: User CPU in % (Load)
Legend2[localhost.cpu]: Idle CPU in % (Load)
Legend3[localhost.cpu]:
Legend4[localhost.cpu]:
LegendI[localhost.cpu]: User
LegendO[localhost.cpu]: Idle
Options[localhost.cpu]: growright,nopercent

메모리 사용량
Target[localhost.mem]: memAvailReal.0&memAvailSwap.0:public@localhost
PageTop[localhost.mem]: <H1>Free Memory</H1>
WorkDir: /var/www/mrtg
Options[localhost.mem]: nopercent,growright,gauge,noinfo
Title[localhost.mem]: Free Memory
MaxBytes[localhost.mem]: 10000000000
kMG[localhost.mem]: k,M,G,T,P,X
YLegend[localhost.mem]: bytes
ShortLegend[localhost.mem]: bytes
Legend1[localhost.mem]: Real free
Legend2[localhost.mem]: Swap free
LegendI[localhost.mem]: Real Free :
LegendO[localhost.mem]: Swap Free :

Loopback
Target[127.0.0.1_1]: 1:public@127.0.0.1:
SetEnv[127.0.0.1_1]: MRTG_INT_IP="127.0.0.1" MRTG_INT_DESCR="lo"
MaxBytes[127.0.0.1_1]: 1250000
Title[127.0.0.1_1]: Traffic Analysis for local loopback
PageTop[127.0.0.1_1]: <h1>Traffic Analysis for local loopback</h1>

index 파일 자동생성
indexmaker –output=/home/inhatc2016/www/mrtg/index.html
/etc/mrtg/mrtg.cfg

MRTG 테스트
env LANG=C /usr/bin/mrtg /etc/mrtg/mrtg.cfg

MRTG  CFG 위치
/etc/mrtg/mrtg.cfg

MRTG 크론탭 위치
cat /etc/cron.d/mrtg

5분단위 그래프 갱신
*/5 * * * * root LANG=C LC_ALL=C /usr/bin/mrtg /etc/mrtg/mrtg.cfg --lock-file /var/lock/mrtg/mrtg_l --confcache-file /var/lib/mrtg/mrtg.ok


cpu load average
memory free
rate of cpu use 
수동으로 넣어줘야한다. cfgmaker 후에


cpu load average
memory free
rate of cpu use 
수동으로 넣어줘야한다. cfgmaker 후에

conf.d 밑에
deny from all 
모든 아이피를 차단
Allow from 127.0.0.1
해당 아이피만 승인

서버 트래픽을 확인할 때
평균적 수치 보다는
피크타임 버틸 수 있는지가 중요
(전체적인 수치를 확인)

침입탐지 시스템
비정상 패턴을 감지

Disk Partition Usage
network
httpd 트래픽
+
 snmpwalk -v 1 -c public localhost dskTable

iptables -L
서버의 내부방화벽 리스트를 확인할 수 있다.

22번 포트를 보안적으로 쓰기위해
일부 IP만 접속 가능하게
22번의 포트를 다른 포트번호로 변경

허나 80번 포트는 항상 열려있고
어느 ip나 들어올수 있기 때문에
좀더 주의해야한다.
	침입을 방지하는 외부 방화벽에서
		짧은 시간안에 많은 컨넥션을 시도하는 ip를 막아버린다.
	방화벽 보안 솔루션에서 패턴을 알아내는 알고리즘을 통해 알아낸다.


var/log/secure 현재까지 접속시도한 로그들

iptables -A INPUT -s 111.222.33.44. -j DROP
	111.222.33.44 차단

iptables -A INPUT -s 111.222.33.0/24 -j DROP
	111.222.33.X 대역 차단

웹 80 포트 tcp 인풋, 아웃풋 열기
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --sport 80 -j ACCEPT

ssh 22 포트 tcp INPUT,OUTPUT 열기
iptables -I INPUT -p tcp --dport 22 -j ACCEPT
iptables -I IOUTPUT -p tcp --sport 22 -j ACCEPT


날짜
UTC+9
